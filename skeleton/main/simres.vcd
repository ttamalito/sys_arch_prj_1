$date
	Wed Jun 14 17:27:07 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 32 4 pc [31:0] $end
$var wire 1 ( memwrite $end
$var wire 1 5 memtoreg $end
$var wire 1 6 dojump $end
$var wire 1 7 dobranch $end
$var wire 5 8 destreg [4:0] $end
$var wire 1 9 alusrcbimm $end
$var wire 32 : aluout [31:0] $end
$var wire 3 ; alucontrol [2:0] $end
$scope module decoder $end
$var wire 32 < instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 = op [5:0] $end
$var wire 6 > funct [5:0] $end
$var reg 3 ? alucontrol [2:0] $end
$var reg 1 9 alusrcbimm $end
$var reg 5 @ destreg [4:0] $end
$var reg 1 7 dobranch $end
$var reg 1 6 dojump $end
$var reg 1 5 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 1 3 regwrite $end
$upscope $end
$scope module dp $end
$var wire 3 A alucontrol [2:0] $end
$var wire 1 9 alusrcbimm $end
$var wire 1 ! clk $end
$var wire 5 B destreg [4:0] $end
$var wire 1 7 dobranch $end
$var wire 32 C instr [31:0] $end
$var wire 1 6 jump $end
$var wire 1 5 memtoreg $end
$var wire 32 D mfhi_wire [31:0] $end
$var wire 32 E mflo_wire [31:0] $end
$var wire 32 F readdata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 " reset $end
$var wire 32 G writedata [31:0] $end
$var wire 32 H zero_left_wire [31:0] $end
$var wire 1 1 zero $end
$var wire 32 I srcbimm [31:0] $end
$var wire 32 J srcb [31:0] $end
$var wire 32 K srca [31:0] $end
$var wire 32 L signimm [31:0] $end
$var wire 32 M result [31:0] $end
$var wire 32 N pc [31:0] $end
$var wire 32 O paddwire [31:0] $end
$var wire 32 P lo [31:0] $end
$var wire 32 Q jal_wire [31:0] $end
$var wire 32 R hi [31:0] $end
$var wire 1 S enable_mul $end
$var wire 32 T aluout [31:0] $end
$scope module alu $end
$var wire 32 U a_and_b [31:0] $end
$var wire 32 V a_or_b [31:0] $end
$var wire 3 W alucontrol [2:0] $end
$var wire 32 X b [31:0] $end
$var wire 1 Y first_xor $end
$var wire 1 Z second_xor $end
$var wire 1 1 zero $end
$var wire 32 [ sum [31:0] $end
$var wire 32 \ result [31:0] $end
$var wire 32 ] extend [31:0] $end
$var wire 1 ^ cout1 $end
$var wire 32 _ b_multi [31:0] $end
$var wire 32 ` a [31:0] $end
$upscope $end
$scope module back $end
$var wire 16 a a [15:0] $end
$var wire 32 b y [31:0] $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 c ra1 [4:0] $end
$var wire 5 d ra2 [4:0] $end
$var wire 5 e wa3 [4:0] $end
$var wire 32 f wd3 [31:0] $end
$var wire 1 3 we3 $end
$var wire 32 g rd2 [31:0] $end
$var wire 32 h rd1 [31:0] $end
$upscope $end
$scope module mul $end
$var wire 1 ! clk $end
$var wire 32 i mfhi [31:0] $end
$var wire 32 j mflo [31:0] $end
$var wire 1 S mul_enable $end
$var wire 32 k wd3hi [31:0] $end
$var wire 32 l wd3lo [31:0] $end
$upscope $end
$scope module padd $end
$var wire 16 m a [15:0] $end
$var wire 32 n y [31:0] $end
$upscope $end
$scope module pcenv $end
$var wire 32 o aluResult [31:0] $end
$var wire 1 ! clk $end
$var wire 1 7 dobranch $end
$var wire 1 6 dojump $end
$var wire 32 p jr_pc [31:0] $end
$var wire 26 q jumptarget [25:0] $end
$var wire 6 r least_sig_bits [5:0] $end
$var wire 6 s opCode [5:0] $end
$var wire 32 t pc_plus [31:0] $end
$var wire 32 u progcounter [31:0] $end
$var wire 1 " reset $end
$var wire 32 v nextpc [31:0] $end
$var wire 32 w incpc [31:0] $end
$var wire 32 x branchpc [31:0] $end
$var wire 32 y branchoffset [31:0] $end
$var reg 32 z pc [31:0] $end
$scope module pcbranch $end
$var wire 32 { b [31:0] $end
$var wire 1 | cin $end
$var wire 32 } y [31:0] $end
$var wire 1 ~ cout $end
$var wire 32 !" a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 "" a [31:0] $end
$var wire 32 #" b [31:0] $end
$var wire 1 $" cin $end
$var wire 32 %" y [31:0] $end
$var wire 1 &" cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 16 '" a [15:0] $end
$var wire 32 (" y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111011 ("
b1111011 '"
0&"
b10000000000000000000100 %"
0$"
b100 #"
b10000000000000000000000 ""
b10000000000000000000100 !"
0~
b10000000000000111110000 }
0|
b111101100 {
b10000000000000000000000 z
b1111011 y
b10000000000000111110000 x
b10000000000000000000100 w
b10000000000000000000100 v
b10000000000000000000000 u
b10000000000000000000100 t
b1001 s
b111011 r
b10000000001111011 q
b0 p
b1111011 o
b1111011 n
b1111011 m
b1101101100011000 l
b0 k
bx j
bx i
b0 h
b11001010111111101011101010111110 g
b1111011 f
b1 e
b1 d
b0 c
b11110110000000000000000 b
b1111011 a
b0 `
b1111011 _
0^
b0 ]
b1111011 \
b1111011 [
0Z
0Y
b1111011 X
b10 W
b1111011 V
b0 U
b1111011 T
0S
b0 R
b10000000000000000000100 Q
b1101101100011000 P
b11110110000000000000000 O
b10000000000000000000000 N
b1111011 M
b1111011 L
b0 K
b11001010111111101011101010111110 J
b1111011 I
b1111011 H
b11001010111111101011101010111110 G
bx F
bx E
bx D
b100100000000010000000001111011 C
b1 B
b10 A
b1 @
b10 ?
b111011 >
b1001 =
b100100000000010000000001111011 <
b10 ;
b1111011 :
19
b1 8
07
06
05
b10000000000000000000000 4
13
b11001010111111101011101010111110 2
01
bx 0
b100100000000010000000001111011 /
b100100000000010000000001111011 .
b0 -
b11001010111111101011101010111110 ,
bx +
b11110 *
b1111011 )
0(
b100100000000010000000001111011 '
b10000000000000000000000 &
bx %
b11001010111111101011101010111110 $
b100000 #
1"
1!
$end
#2
0!
#4
b1111011 $
b1111011 ,
b1111011 2
b1111011 G
b1111011 J
b1111011 g
1!
#5
0"
#6
0!
#8
b10000000000000000001000 v
b11001010111111101011101010111110 $
b11001010111111101011101010111110 ,
b11001010111111101011101010111110 2
b11001010111111101011101010111110 G
b11001010111111101011101010111110 J
b11001010111111101011101010111110 g
b10000000000000111110100 x
b10000000000000111110100 }
b10 8
b10 @
b10 B
b10 e
b100000000001111011 q
b10 d
b10000000000000000001000 Q
b10000000000000000001000 t
b10000000000000000001000 w
b10000000000000000001000 !"
b10000000000000000001000 %"
b100100000000100000000001111011 '
b100100000000100000000001111011 .
b100100000000100000000001111011 /
b100100000000100000000001111011 <
b100100000000100000000001111011 C
b1 -
b10000000000000000000100 &
b10000000000000000000100 4
b10000000000000000000100 N
b10000000000000000000100 u
b10000000000000000000100 z
b10000000000000000000100 ""
1!
#10
0!
#12
b101111100 M
b101111100 f
b11111 *
b101111100 )
b101111100 :
b101111100 T
b101111100 \
b101111100 o
b101111100 [
b101111100 V
b101111100 _
b10000000000000000001100 v
b101111100 I
b101111100 X
b10111110000 {
b10000000000010111111100 x
b10000000000010111111100 }
b111100 >
b100000000101111100 q
b111100 r
b101111100 L
b101111100 y
b101111100 ("
b101111100 '"
b1011111000000000000000000 O
b1011111000000000000000000 b
b101111100 a
b101111100 H
b101111100 n
b101111100 m
b1111011 $
b1111011 ,
b1111011 2
b1111011 G
b1111011 J
b1111011 g
b10000000000000000001100 Q
b10000000000000000001100 t
b10000000000000000001100 w
b10000000000000000001100 !"
b10000000000000000001100 %"
b100100000000100000000101111100 '
b100100000000100000000101111100 .
b100100000000100000000101111100 /
b100100000000100000000101111100 <
b100100000000100000000101111100 C
b10 -
b10000000000000000001000 &
b10000000000000000001000 4
b10000000000000000001000 N
b10000000000000000001000 u
b10000000000000000001000 z
b10000000000000000001000 ""
1!
#14
0!
#16
b1111111 M
b1111111 f
b1111111 )
b1111111 :
b1111111 T
b1111111 \
b1111111 o
b1111111 [
b1111111 V
b1111111 _
b10000000000000000010000 v
b1111111 I
b1111111 X
b111111100 {
b10000000000001000001100 x
b10000000000001000001100 }
b111111 >
b100000000001111111 q
b111111 r
b1111111 L
b1111111 y
b1111111 ("
b1111111 '"
b11111110000000000000000 O
b11111110000000000000000 b
b1111111 a
b1111111 H
b1111111 n
b1111111 m
b10000000000000000010000 Q
b10000000000000000010000 t
b10000000000000000010000 w
b10000000000000000010000 !"
b10000000000000000010000 %"
b100100000000100000000001111111 '
b100100000000100000000001111111 .
b100100000000100000000001111111 /
b100100000000100000000001111111 <
b100100000000100000000001111111 C
b11 -
b101111100 $
b101111100 ,
b101111100 2
b101111100 G
b101111100 J
b101111100 g
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 N
b10000000000000000001100 u
b10000000000000000001100 z
b10000000000000000001100 ""
1!
#18
0!
#20
b1111010 M
b1111010 f
b11110 *
b1111010 )
b1111010 :
b1111010 T
b1111010 \
b1111010 o
b1111010 [
b1111010 V
b1111010 _
b10000000000000000010100 v
b1111010 I
b1111010 X
b111101000 {
b10000000000000111111100 x
b10000000000000111111100 }
b111010 >
b100000000001111010 q
b111010 r
b1111010 L
b1111010 y
b1111010 ("
b1111010 '"
b11110100000000000000000 O
b11110100000000000000000 b
b1111010 a
b1111010 H
b1111010 n
b1111010 m
b1111111 $
b1111111 ,
b1111111 2
b1111111 G
b1111111 J
b1111111 g
b10000000000000000010100 Q
b10000000000000000010100 t
b10000000000000000010100 w
b10000000000000000010100 !"
b10000000000000000010100 %"
b100100000000100000000001111010 '
b100100000000100000000001111010 .
b100100000000100000000001111010 /
b100100000000100000000001111010 <
b100100000000100000000001111010 C
b100 -
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 N
b10000000000000000010000 u
b10000000000000000010000 z
b10000000000000000010000 ""
1!
#22
0!
#24
x1
bx *
bx )
bx :
bx T
bx \
bx o
b0x ]
xZ
xY
bx [
x^
xS
bx v
x~
bx _
bx V
bx U
bx00 {
bx I
bx X
bx M
bx f
bx K
bx `
bx h
bx p
bx x
bx }
b11 ;
b11 ?
b11 A
b11 W
x6
x5
x(
x7
x9
bx 8
bx @
bx B
bx e
x3
bx =
bx >
bx q
bx s
bx r
bx L
bx y
bx ("
bx '"
bx0000000000000000 O
bx0000000000000000 b
bx a
b0xxxxxxxxxxxxxxxx H
b0xxxxxxxxxxxxxxxx n
bx m
bx c
bx d
b10000000000000000011000 Q
b10000000000000000011000 t
b10000000000000000011000 w
b10000000000000000011000 !"
b10000000000000000011000 %"
bx '
bx .
bx /
bx <
bx C
b101 -
bx $
bx ,
bx 2
bx G
bx J
bx g
b10000000000000000010100 &
b10000000000000000010100 4
b10000000000000000010100 N
b10000000000000000010100 u
b10000000000000000010100 z
b10000000000000000010100 ""
1!
#26
0!
#28
bx Q
bx t
bx w
bx !"
bx %"
x&"
bx -
bx &
bx 4
bx N
bx u
bx z
bx ""
1!
#29
b10 #
