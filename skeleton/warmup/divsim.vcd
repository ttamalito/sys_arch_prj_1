$date
	Thu Jun 08 20:08:08 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module DivisionTestbench $end
$var wire 32 ! rres [31:0] $end
$var wire 32 " qres [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ s $end
$scope module divider $end
$var wire 32 % a [31:0] $end
$var wire 32 & b [31:0] $end
$var wire 1 # clock $end
$var wire 5 ' counter_dividend_value [4:0] $end
$var wire 32 ( q [31:0] $end
$var wire 5 ) q_counter_value [4:0] $end
$var wire 32 * r [31:0] $end
$var wire 1 $ start $end
$var wire 1 + r_prime_minus_b $end
$var wire 32 , r_prime [31:0] $end
$var wire 1 - predicate $end
$var wire 5 . decreased_q_counter [4:0] $end
$var wire 5 / decreased_counter [4:0] $end
$var reg 5 0 counter [4:0] $end
$var reg 32 1 dividend [31:0] $end
$var reg 32 2 divisor [31:0] $end
$var reg 32 3 partial_result [31:0] $end
$var reg 5 4 q_counter [4:0] $end
$var reg 32 5 remainder [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
x-
bx ,
x+
bx *
bx )
bx (
bx '
b11 &
b111 %
0$
1#
bx "
bx !
$end
#1
1$
#2
0#
#4
1+
b11110 .
b11110 /
1-
b0 ,
b0 "
b0 (
b0 3
b11111 )
b11111 4
b11111 '
b11111 0
b111 1
b11 2
b0 !
b0 *
b0 5
1#
#5
0$
#6
0#
#8
b11101 /
b11101 .
b11110 '
b11110 0
b11110 )
b11110 4
1#
#10
0#
#12
b11100 /
b11100 .
b11101 '
b11101 0
b11101 )
b11101 4
1#
#14
0#
#16
b11011 /
b11011 .
b11100 '
b11100 0
b11100 )
b11100 4
1#
#18
0#
#20
b11010 /
b11010 .
b11011 '
b11011 0
b11011 )
b11011 4
1#
#22
0#
#24
b11001 /
b11001 .
b11010 '
b11010 0
b11010 )
b11010 4
1#
#26
0#
#28
b11000 /
b11000 .
b11001 '
b11001 0
b11001 )
b11001 4
1#
#30
0#
#32
b10111 /
b10111 .
b11000 '
b11000 0
b11000 )
b11000 4
1#
#34
0#
#36
b10110 /
b10110 .
b10111 '
b10111 0
b10111 )
b10111 4
1#
#38
0#
#40
b10101 /
b10101 .
b10110 '
b10110 0
b10110 )
b10110 4
1#
#42
0#
#44
b10100 /
b10100 .
b10101 '
b10101 0
b10101 )
b10101 4
1#
#46
0#
#48
b10011 /
b10011 .
b10100 '
b10100 0
b10100 )
b10100 4
1#
#50
0#
#52
b10010 /
b10010 .
b10011 '
b10011 0
b10011 )
b10011 4
1#
#54
0#
#56
b10001 /
b10001 .
b10010 '
b10010 0
b10010 )
b10010 4
1#
#58
0#
#60
b10000 /
b10000 .
b10001 '
b10001 0
b10001 )
b10001 4
1#
#62
0#
#64
b1111 /
b1111 .
b10000 '
b10000 0
b10000 )
b10000 4
1#
#66
0#
#68
b1110 /
b1110 .
b1111 '
b1111 0
b1111 )
b1111 4
1#
#70
0#
#72
b1101 /
b1101 .
b1110 '
b1110 0
b1110 )
b1110 4
1#
#74
0#
#76
b1100 /
b1100 .
b1101 '
b1101 0
b1101 )
b1101 4
1#
#78
0#
#80
b1011 /
b1011 .
b1100 '
b1100 0
b1100 )
b1100 4
1#
#82
0#
#84
b1010 /
b1010 .
b1011 '
b1011 0
b1011 )
b1011 4
1#
#86
0#
#88
b1001 /
b1001 .
b1010 '
b1010 0
b1010 )
b1010 4
1#
#90
0#
#92
b1000 /
b1000 .
b1001 '
b1001 0
b1001 )
b1001 4
1#
#94
0#
#96
b111 /
b111 .
b1000 '
b1000 0
b1000 )
b1000 4
1#
#98
0#
#100
b110 /
b110 .
b111 '
b111 0
b111 )
b111 4
1#
#102
0#
#104
b101 /
b101 .
b110 '
b110 0
b110 )
b110 4
1#
#106
0#
#108
b100 /
b100 .
b101 '
b101 0
b101 )
b101 4
1#
#110
0#
#112
b11 /
b11 .
b100 '
b100 0
b100 )
b100 4
1#
#114
0#
#116
b10 /
b10 .
b11 '
b11 0
b11 )
b11 4
1#
#118
0#
#120
0+
b1 /
b1 .
b1 ,
b10 '
b10 0
b10 )
b10 4
1#
#122
0#
#124
b0 /
b0 .
0-
b11 ,
b1 '
b1 0
b1 )
b1 4
b1 !
b1 *
b1 5
1#
#126
0#
#128
1-
b1 ,
b0 '
b0 0
b0 )
b0 4
b0 !
b0 *
b0 5
b10 "
b10 (
b10 3
1#
#130
0#
#132
0-
b11 ,
b1 !
b1 *
b1 5
1#
#134
0#
#136
1-
b1 ,
b0 !
b0 *
b0 5
b11 "
b11 (
b11 3
1#
#138
0#
#140
0-
b11 ,
b1 !
b1 *
b1 5
b10 "
b10 (
b10 3
1#
#142
0#
#144
1-
b1 ,
b0 !
b0 *
b0 5
b11 "
b11 (
b11 3
1#
#146
0#
#148
0-
b11 ,
b1 !
b1 *
b1 5
b10 "
b10 (
b10 3
1#
#150
0#
#152
1-
b1 ,
b0 !
b0 *
b0 5
b11 "
b11 (
b11 3
1#
#154
0#
#156
0-
b11 ,
b1 !
b1 *
b1 5
b10 "
b10 (
b10 3
1#
#158
0#
#160
1-
b1 ,
b0 !
b0 *
b0 5
b11 "
b11 (
b11 3
1#
#162
0#
#164
0-
b11 ,
b1 !
b1 *
b1 5
b10 "
b10 (
b10 3
1#
#165
